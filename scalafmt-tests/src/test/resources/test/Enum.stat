runner.dialect = dotty
maxColumn = 40
<<< enum
enum Color {
case Red, Green, Blue
}
>>>
enum Color {
  case Red, Green, Blue
}
<<< parameterized enum
enum Color (val rgb: Int) {
case Red   extends Color(0xff0000)
case Green extends Color(0x00ff00)
case Blue  extends Color(0x0000ff)
}
>>>
enum Color(val rgb: Int) {
  case Red extends Color(0xff0000)
  case Green extends Color(0x00ff00)
  case Blue extends Color(0x0000ff)
}
<<< user-defined members of enums
enum Planet (mass: Double, radius: Double, name: String, id: Int) {
case Mercury extends Planet(3.303e+23, 2.4397e6)
case Venus extends Planet(4.869e+24, 6.0518e6)
case Earth extends Planet(5.976e+24, 6.37814e6)
case Mars extends Planet(6.421e+23, 3.3972e6)
case Jupiter extends Planet(1.9e+27, 7.1492e7)
case Saturn extends Planet(5.688e+26, 6.0268e7)
case Uranus extends Planet(8.686e+25, 2.5559e7)
case Neptune extends Planet(1.024e+26, 2.4746e7)
}
>>>
enum Planet(
    mass: Double,
    radius: Double,
    name: String,
    id: Int
) {
  case Mercury
      extends Planet(
        3.303e+23,
        2.4397e6
      )
  case Venus
      extends Planet(
        4.869e+24,
        6.0518e6
      )
  case Earth
      extends Planet(
        5.976e+24,
        6.37814e6
      )
  case Mars
      extends Planet(
        6.421e+23,
        3.3972e6
      )
  case Jupiter
      extends Planet(1.9e+27, 7.1492e7)
  case Saturn
      extends Planet(
        5.688e+26,
        6.0268e7
      )
  case Uranus
      extends Planet(
        8.686e+25,
        2.5559e7
      )
  case Neptune
      extends Planet(
        1.024e+26,
        2.4746e7
      )
}
<<< enum with sequence of `with` statements
enum A extends Alpha with Beta with Gamma with Delta with Epsilon {
  case B
}
>>>
enum A
    extends Alpha
    with Beta
    with Gamma
    with Delta
    with Epsilon {
  case B
}
<<< enum case with parent constructors `never`
binPack.parentConstructors = Never
maxColumn = 30
===
enum Foo(val x: Int) {
  case Bar extends Foo(1) with X with Y with Z
}
>>>
enum Foo(val x: Int) {
  case Bar
      extends Foo(1)
      with X
      with Y
      with Z
}
<<< enum case with parent constructors `always`
binPack.parentConstructors = Always
maxColumn = 30
===
enum Foo(val x: Int) {
  case Bar extends Foo(1) with X with Y with Z
}
>>>
enum Foo(val x: Int) {
  case Bar
      extends Foo(1) with X
      with Y with Z
}
<<< enum case with parent constructors `oneline`
binPack.parentConstructors = Oneline
maxColumn = 30
===
enum Foo(val x: Int) {
  case Bar extends Foo(1) with Baz

  case Far extends Foo(1) with Faz
}
>>>
enum Foo(val x: Int) {
  case Bar
      extends Foo(1) with Baz

  case Far
      extends Foo(1) with Faz
}
<<< ONLY enum case with parent constructors `onelineIfPrimaryOneline`
binPack.parentConstructors = OnelineIfPrimaryOneline
maxColumn = 40
# Bar . with (newline is picked, we need a space)
# Space:1471(cost=0, indents=[], NoPolicy)
# Newline:1472(cost=1, indents=[], NoPolicy)
===
enum Foo(val a: String, val b: String) {
  case Bar extends Foo("arg1", "arg2")
  with Bar with FooBar

  case Far extends Foo(
    "arg1",
    "arg2"
  ) with Bar with FooBar
}
>>>
enum Foo(val a: String, val b: String) {
  case Bar
      extends Foo("arg1", "arg2")
      with Bar with FooBar

  case Far
      extends Foo(
        "arg1",
        "arg2"
      )
      with Bar
      with FooBar
}
<<< EXAMPLE
binPack.parentConstructors = OnelineIfPrimaryOneline
maxColumn = 30
# space is picked, the dirrence is that here newline has some policy
# Space:1454(cost=0, indents=[], NoPolicy)
# Newline:1455(cost=1, indents=[], 1442>65d)
===
object A {
  class Bar(a: Int, b: Int)
      extends Foo with Baz

  class Bar(
    a: Int,
    b: Int
  ) extends Foo
      with Bar
      with FooBar
}
>>>
object A {
  class Bar(a: Int, b: Int)
      extends Foo with Baz

  class Bar(
      a: Int,
      b: Int
  ) extends Foo
      with Bar
      with FooBar
}
<<< class test
binPack.parentConstructors = Never
maxColumn = 30
===
object a {
  class A(x: Int)
  extends Foo
  with X
  with Y
  with Z


  class B(
    x: Int
  )
  extends Foo
  with X
  with Y
  with Z
}
>>>
object a {
  class A(x: Int)
      extends Foo with X
      with Y with Z

  class B(
      x: Int
  ) extends Foo with X with Y
      with Z
}
<<< simple test
maxColumn = 30
===
class A extends B with C with D
>>>
class A
    extends B with C with D
